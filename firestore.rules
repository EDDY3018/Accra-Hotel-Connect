
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // USERS: Allow users to manage their own profile. 
    // Allow students to read their manager's profile for contact info.
    // Allow managers to read profiles of students they manage.
    match /users/{userId} {
      allow create: if request.auth != null;
      allow read, update: if request.auth != null && request.auth.uid == userId;
      
      allow list: if request.auth != null && 
                   get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'manager';
    }

    // ROOMS: Allow any authenticated user to list and read rooms. Only managers can edit their own rooms.
    match /rooms/{roomId} {
      allow read: if request.auth != null; 
      allow create: if request.auth != null && request.resource.data.managerUid == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.managerUid == request.auth.uid;
    }
    
    // BOOKINGS: Students can manage their own bookings. Managers can view bookings for their hostel.
    match /bookings/{bookingId} {
       allow create: if request.auth != null && request.resource.data.studentUid == request.auth.uid;
       allow read, update: if request.auth != null && (resource.data.studentUid == request.auth.uid || resource.data.managerUid == request.auth.uid);
       allow list: if request.auth != null && (request.query.where.studentUid == request.auth.uid || request.query.where.managerUid == request.auth.uid);
    }

    // PAYMENTS: Students can create and view their own payments. Managers can see payments for their students.
    match /payments/{paymentId} {
      allow create: if request.auth != null && request.resource.data.studentUid == request.auth.uid;
      allow read, list: if request.auth != null && (
          request.query.where.studentUid == request.auth.uid || 
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'manager'
      );
    }

    // TICKETS: Students can manage their own tickets. Managers can manage tickets for their hostel.
    match /tickets/{ticketId} {
      allow create: if request.auth != null && request.resource.data.studentUid == request.auth.uid;
      allow read, update: if request.auth != null && (resource.data.studentUid == request.auth.uid || resource.data.managerUid == request.auth.uid);
      allow list: if request.auth != null && (request.query.where.studentUid == request.auth.uid || request.query.where.managerUid == request.auth.uid);
    }

    // ANNOUNCEMENTS: Students can read announcements. Managers can manage their own announcements.
    match /announcements/{announcementId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && request.resource.data.managerUid == request.auth.uid;
      allow list: if request.auth != null;
    }

    // CANCELLATIONS: Students can create cancellation records. Managers can read them.
    match /cancellations/{cancellationId} {
      allow create: if request.auth != null && request.resource.data.studentUid == request.auth.uid;
      allow read, list: if request.auth != null && request.query.where.managerUid == request.auth.uid;
    }

    // MAIL: Allow authenticated users to create email documents. The backend function handles the rest.
    match /mail/{mailId} {
      allow create: if request.auth != null;
    }
  }
}

    