rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // USERS: Allow users to manage their own profile. 
    // Allow students to read their manager's profile for contact info.
    // Allow managers to read profiles of students they manage.
    match /users/{userId} {
      allow create: if request.auth != null;
      
      // Allow a user to update their own profile.
      // Allow a manager to update specific fields on a student's profile.
      allow update: if request.auth != null && (
        (request.auth.uid == userId) ||
        (
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'manager' &&
          get(/databases/$(database)/documents/users/$(userId)).data.managerUid == request.auth.uid
        )
      );
      
      // Read access is complex:
      // 1. You can read your own profile.
      // 2. A student can read their manager's profile.
      // 3. A manager can read their students' profiles.
      allow read: if request.auth != null && (
        request.auth.uid == userId ||
        (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.managerUid == userId) ||
        (exists(/databases/$(database)/documents/users/$(userId)) &&
         get(/databases/$(database)/documents/users/$(userId)).data.managerUid == request.auth.uid)
      );
      
      // Managers can list students associated with them.
      allow list: if request.auth != null && request.query.get("where.managerUid") == request.auth.uid;
    }

    // ROOMS: Allow any authenticated user to list and read rooms. Only managers can edit their own rooms.
    match /rooms/{roomId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && request.resource.data.managerUid == request.auth.uid;
    }
    
    // BOOKINGS: Students can manage their own bookings. Managers can view bookings for their hostel.
    match /bookings/{bookingId} {
       allow create: if request.auth != null && request.resource.data.studentUid == request.auth.uid;
       allow read: if request.auth != null && (resource.data.studentUid == request.auth.uid || resource.data.managerUid == request.auth.uid);
       allow update: if request.auth != null && (
          // A manager can update bookings associated with their hostel.
          resource.data.managerUid == request.auth.uid ||
          // A student can update their own booking ONLY to cancel it if it is unpaid.
          (resource.data.studentUid == request.auth.uid && resource.data.status == 'Unpaid' && request.resource.data.status == 'Cancelled')
       );
    }
    
    // CANCELLATIONS: Students can create cancellations, managers can read them.
    match /cancellations/{cancellationId} {
        allow create: if request.auth != null && request.resource.data.studentUid == request.auth.uid;
        allow read: if request.auth != null && resource.data.managerUid == request.auth.uid;
    }

    // PAYMENTS: Managers can create payments on behalf of students. Students can read their own.
    match /payments/{paymentId} {
      // Only managers can create payments, verified by checking their role.
      allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'manager';
      allow read: if request.auth != null && (
        resource.data.studentUid == request.auth.uid ||
        resource.data.managerUid == request.auth.uid
      );
    }

    // TICKETS: Students can manage their own tickets. Managers can manage tickets for their hostel.
    match /tickets/{ticketId} {
      allow create: if request.auth != null && request.resource.data.studentUid == request.auth.uid;
      allow read, update: if request.auth != null && (resource.data.studentUid == request.auth.uid || resource.data.managerUid == request.auth.uid);
    }

    // ANNOUNCEMENTS: Students can read announcements. Managers can manage their own announcements.
    match /announcements/{announcementId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null && request.resource.data.managerUid == request.auth.uid;
    }
    
    // MAIL: Allow authenticated users to create email documents for the Trigger Email extension.
    match /mail/{docId} {
      allow create: if request.auth != null;
    }
  }
}
